# Напишите программу, которая принимает на стандартный вход список игр футбольных команд с результатом матча и выводит на стандартный вывод сводную таблицу результатов всех матчей.

# table = []
# teams = {}
# points = 0
# match_count = 0
# victories = 0
# draws = 0
# losses = 0
#
# i = 0
#
# n = int(input())
#
# while i <= n - 1:
#     match = str(input())
#     table.append(match)
#     i += 1
#
# for i in range(len(table)):
#     table[i] = table[i].split(';')
#     teams[table[i][0]] = [match_count, victories, draws, losses, points]
#     teams[table[i][2]] = [match_count, victories, draws, losses, points]
#
#
# for i in range(len(table)):
#     table[i][1] = int(table[i][1])
#     table[i][3] = int(table[i][3])
#     if table[i][1] > table[i][3]:
#         teams[table[i][0]][0] += 1
#         teams[table[i][0]][1] += 1
#         teams[table[i][0]][4] += 3
#         teams[table[i][2]][0] += 1
#         teams[table[i][2]][3] += 1
#     elif table[i][1] < table[i][3]:
#         teams[table[i][2]][0] += 1
#         teams[table[i][2]][1] += 1
#         teams[table[i][2]][4] += 3
#         teams[table[i][0]][0] += 1
#         teams[table[i][0]][3] += 1
#     else:
#         teams[table[i][2]][0] += 1
#         teams[table[i][2]][2] += 1
#         teams[table[i][2]][4] += 1
#         teams[table[i][0]][0] += 1
#         teams[table[i][0]][2] += 1
#         teams[table[i][0]][4] += 1
#
# for fclub, stat in teams.items():
#     str_stat = list(map(str, stat))
#     print(fclub + ':' + ' '.join(str_stat))
################################################

# Напишите функцию update_dictionary(d, key, value), которая принимает на вход словарь  d и два числа:  key и  value.  Если ключ key есть в словаре  d, то добавьте значение  value в список, который хранится по этому ключу. Если ключа  k e y key нет в словаре, то нужно добавить значение в список по ключу  2 ∗ k e y 2∗key. Если и ключа  2 ∗ k e y 2∗key нет, то нужно добавить ключ  2 ∗ k e y 2∗key в словарь и сопоставить ему список из переданного элемента  [value].  Требуется реализовать только эту функцию, кода вне её не должно быть. Функция не должна вызывать внутри себя функции input и print.


# def update_dictionary(d, key, value):
#     if key in d:
#         d[key].append(value)
#     else:
#         if key * 2 in d:
#             d[key * 2].append(value)
#         else:
#             d[key * 2] = [value]
#############################################

# Когда Антон прочитал «Войну и мир», ему стало интересно, сколько слов и в каком количестве используется в этой книге.
#
# Помогите Антону написать упрощённую версию такой программы, которая сможет подсчитать слова, разделённые пробелом и вывести получившуюся статистику.
#
# Программа должна считывать одну строку со стандартного ввода и выводить для каждого уникального слова в этой строке число его повторений (без учёта регистра) в формате "слово количество" (см. пример вывода).
# Порядок вывода слов может быть произвольным, каждое уникальное слово﻿ должно выводиться только один раз.

# new_input = input().split()
# result = { }
#
# for letter in new_input:
#     if letter.lower() not in result:
#         result[letter.lower()] = 1
#     else:
#         result[letter.lower()] += 1
#
# for key, val in result.items():
#     print(f'{key} {val}')
############################################

# Напишите программу, которая считывает строку с числом  n n, которое задаёт количество чисел, которые нужно считать. Далее считывает  n n строк с числами  x i x  i ​   , по одному числу в каждой строке. Итого будет  n + 1 n+1 строк.  При считывании числа  x i x  i ​    программа должна на отдельной строке вывести значение  f ( x i ) f(x  i ​   ). Функция f(x) уже реализована и доступна для вызова.   Функция вычисляется достаточно долго и зависит только от переданного аргумента  x x. Для того, чтобы уложиться в ограничение по времени, нужно избежать повторного вычисления значений.

# n = int(input())
#
# dictionary = {}
#
# for n in range(0, n):
#     n = int(input())
#     if dictionary.get(n) == None:
#         dictionary.setdefault(n, f(n))
#     print(dictionary[n])
##################################################

# Напишите функцию f(x), которая возвращает значение следующей функции, определённой на всей числовой прямой:

# def f(x):
#     if x<=-2:
#         f=1-(x+2)**2
#     elif x>-2 and x<=2:
#         f=-(x/2)
#     elif x>2:
#         f=(x-2)**2+1
#     return f
################################

# Напишите функцию modify_list(l), которая принимает на вход список целых чисел, удаляет из него все нечётные значения, а чётные нацело делит на два. Функция не должна ничего возвращать, требуется только изменение
# переданного списка, например:

# def modify_list(l):
#     # put your python code here
#     le = len(l)-1
#     i = le
#     while i!=-1:
#         if l[i]%2:
#             del l[i]
#         else:
#             l[i]=l[i]//2
#         i -=1
#     return
###################################################

# Напишите программу, которая считывает с консоли числа (по одному в строке) до тех пор, пока сумма введённых чисел не будет равна 0 и сразу после этого выводит сумму квадратов всех считанных чисел.
#
# Гарантируется, что в какой-то момент сумма введённых чисел окажется равной 0, после этого считывание продолжать не нужно.
#
# В примере мы считываем числа 1, -3, 5, -6, -10, 13; в этот момент замечаем, что сумма этих чисел равна нулю и выводим сумму их квадратов, не обращая внимания на то, что остались ещё не прочитанные значения.﻿

# stop_counter = None
# all_nums = []
#
# while stop_counter != 0:
#     user_input = int(input())
#     if stop_counter is None:
#         stop_counter = user_input
#         all_nums.append(user_input)
#     else:
#         stop_counter += user_input
#         all_nums.append(user_input)
#
# for i in all_nums:
#     stop_counter += i ** 2
#
# print(stop_counter)
##############################################

# Напишите программу, которая выводит часть последовательности 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 ... (число повторяется столько раз, чему равно). На вход программе передаётся неотрицательное целое число n — столько элементов последовательности должна отобразить программа. На выходе ожидается последовательность чисел, записанных через пробел в одну строку.
#
# Например, если n = 7, то программа должна вывести 1 2 2 3 3 3 4.

# n = int(input())
# v = []
#
# for i in range(1, n + 1):
#     v += [str(i)] * i
#
# print(" ".join(v[:n]))
#####################################

# Напишите программу, которая считывает список чисел  l s t lst из первой строки и число  x x из второй строки, которая выводит все позиции, на которых встречается число  x x в переданном списке  l s t lst.  Позиции нумеруются с нуля, если число  x x не встречается в списке, вывести строку "Отсутствует" (без кавычек, с большой буквы).  Позиции должны быть выведены в одну строку, по возрастанию абсолютного значения.

# lst = [int(i) for i in input().split()]
# x = int(input())
#
# for i in range(len(lst)):
# 	if x == lst[i]:
# 		print(i, end=' ')
#
# if x not in lst:
#     print('Отсутствует')
########################################

# Напишите программу, на вход которой подаётся прямоугольная матрица в виде последовательности строк. После последней строки матрицы идёт строка, содержащая только строку "end" (без кавычек, см. Sample Input).
#
# Программа должна вывести матрицу того же размера, у которой каждый элемент в позиции i, j равен сумме элементов первой матрицы на позициях (i-1, j), (i+1, j), (i, j-1), (i, j+1). У крайних символов соседний элемент находится с противоположной стороны матрицы.
#
# В случае одной строки/столбца элемент сам себе является соседом по соответствующему направлению.

# n = ''
# m = []
# while True:
#     n = str(input()) # ввод строк
#     if n == 'end':
#         break
#     m.append([int(s) for s in n.split()])
# li, lj = len(m), len(m[0])
# new = [[sum([m[i-1][j], m[(i+1)%li][j], m[i][j-1], m[i][(j+1)%lj]]) for j in range(lj)] for i in range(li)]
#
# for i in range (li):
#     for j in range (lj):
#         print(new[i][j], end =' ')
#     print()
###########################################

# Выведите таблицу размером  n × n n×n, заполненную числами от  1 1 до  n 2 n  2   по спирали, выходящей из левого верхнего угла и закрученной по часовой стрелке, как показано в примере (здесь  n = 5 n=5):

# n = int(input())
#
# a = [[0 for i in range(n)] for j in range(n)]
#
# i = 0
# j = 0
# x = 1
# k = 0
#
# while x <= n * n:
#     a[i][j] = x
#
#     if i != j:
#         a[j][i] = (a[k][k] + (n - k * 2) * 2) * 2 - 4 - x
#
#     if j != n - k - 1:
#         j += 1
#
#     elif i != n - k - 1:
#         i += 1
#
#     elif x != n * n:
#         k += 1
#         i = j = k
#         x = a[k][k - 1]
#
#     x += 1
# for i in a: print(*i)
####################################

# Напишите программу, на вход которой подается одна строка с целыми числами. Программа должна вывести сумму этих чисел.
#
# Используйте метод split строки.

# user_input = input().split()
# input_as_numbers = [int(i) for i in user_input]
# print(sum(input_as_numbers))
#########################################

# Напишите программу, на вход которой подаётся список чисел одной строкой. Программа должна для каждого элемента этого списка вывести сумму двух его соседей. Для элементов списка, являющихся крайними, одним из соседей считается элемент, находящий на противоположном конце этого списка. Например, если на вход подаётся список "1 3 5 6 10", то на выход ожидается список "13 6 9 15 7" (без кавычек).
#
# Если на вход пришло только одно число, надо вывести его же.
#
# Вывод должен содержать одну строку с числами нового списка, разделёнными пробелом.

# user_input = input().split()
# input_as_numbers = [int(i) for i in user_input]
# result = []
#
# if len(input_as_numbers) == 1:
#     print(input_as_numbers[0])
# else:
#     i = 0
#     while i != len(user_input) - 1:
#         main_pointer = input_as_numbers[i]
#         left_pointer = input_as_numbers[i - 1]
#         right_pointer = input_as_numbers[i + 1]
#
#         result.append(left_pointer + right_pointer)
#         i += 1
#     result.append(input_as_numbers[-2] + input_as_numbers[0])
#
#     print(' '.join([str(i) for i in result]))
#######################################################

# Напишите программу, которая принимает на вход список чисел в одной строке и выводит на экран в одну строку значения, которые встречаются в нём более одного раза.
#
# Для решения задачи может пригодиться метод sort списка.
#
# Выводимые числа не должны повторяться, порядок их вывода может быть произвольным.

# user_input = input().split()
# input_as_numbers = [int(i) for i in user_input]
#
# result_dict = { }
# result_list = []
#
# for char in input_as_numbers:
#     if char not in result_dict:
#         result_dict[char] = 1
#     else:
#         result_dict[char] += 1
#
# for key, val in result_dict.items():
#     if val > 1:
#         result_list.append(key)
#
# print(' '.join([str(i) for i in result_list]))
######################################################

# GC-состав является важной характеристикой геномных последовательностей и определяется как процентное соотношение суммы всех гуанинов и цитозинов к общему числу нуклеиновых оснований в геномной последовательности.  Напишите программу, которая вычисляет процентное содержание символов G (гуанин) и C (цитозин) в введенной строке (программа не должна зависеть от регистра вводимых символов).  Например, в строке "acggtgttat" процентное содержание символов G и C равно  4 10 ⋅ 100 = 40.0 10 4 ​   ⋅100=40.0, где 4 -- это количество символов G и C,  а 10 -- это длина строки.

# user_input = input()
# char_counter = 0
#
# for i in user_input:
#     if i.lower() == 'g' or i.lower() == 'c':
#         char_counter += 1
#
# print((char_counter / len(user_input)) * 100)
###################################################

# Узнав, что ДНК не является случайной строкой, только что поступившие в Институт биоинформатики студенты группы информатиков предложили использовать алгоритм сжатия, который сжимает повторяющиеся символы в строке.
#
# Кодирование осуществляется следующим образом:
# s = 'aaaabbсaa' преобразуется в 'a4b2с1a2', то есть группы одинаковых символов исходной строки заменяются на этот символ и количество его повторений в этой позиции строки.
#
# Напишите программу, которая считывает строку, кодирует её предложенным алгоритмом и выводит закодированную последовательность на стандартный вывод. Кодирование должно учитывать регистр символов.

# user_input = input()
#
# counter = 0
# result = user_input[0]
#
# for i in range(len(user_input)):
#     if result[-1] != user_input[i]:
#         result += str(counter)
#         result += user_input[i]
#         counter = 1
#     else:
#         counter += 1
#
# result += str(counter)
#
# print(result)
########################################

# Когда Павел учился в школе, он запоминал таблицу умножения прямоугольными блоками. Для тренировок ему бы очень пригодилась программа, которая показывала бы блок таблицы умножения.  Напишите программу, на вход которой даются четыре числа  a a,  b b,  c c и  d d, каждое в своей строке. Программа должна вывести фрагмент таблицы умножения для всех чисел отрезка  [ a ; b ] [a;b] на все числа отрезка  [ c ; d ] [c;d].  Числа  a a,  b b,  c c и  d d являются натуральными и не превосходят 10,  a ≤ b a≤b,  c ≤ d c≤d.  Следуйте формату вывода из примера, для разделения элементов внутри строки используйте '\t' — символ табуляции. Заметьте, что левым столбцом и верхней строкой выводятся сами числа из заданных отрезков — заголовочные столбец и строка таблицы.﻿

# a =int (input())
# b =int (input())
# c =int (input())
# d =int (input())
# for g in range (c,d+1):
#     print('\t'+str(g),end='')
# print(end='\n')
# for i in range (a,b+1):
#     print(str(i)+'\t',end='')
#     for j in range (c,d+1):
#         print(str(i*j),end='\t')
#     print(end='\n')
##################################

# Напишите программу, которая считывает с клавиатуры два числа  a a и  b b, считает и выводит на консоль среднее арифметическое всех чисел из отрезка  [ a ; b ] [a;b], которые кратны числу  3 3.  В приведенном ниже примере среднее арифметическое считается для чисел на отрезке  [ − 5 ; 12 ] [−5;12]. Всего чисел, делящихся на  3 3, на этом отрезке  6 6:  − 3 , 0 , 3 , 6 , 9 , 12 −3,0,3,6,9,12. Их среднее арифметическое равно  4.5 4.5  На вход программе подаются интервалы, внутри которых всегда есть хотя бы одно число, которое делится на  3 3.﻿

# number_one = int(input())
# number_two = int(input())
#
# all_nums = [i for i in range(number_one, number_two + 1) if i % 3 == 0]
#
# print(sum(all_nums) / len(all_nums))
#############################################

# Напишите программу, которая считывает целые числа с консоли по одному числу в строке.
#
# Для каждого введённого числа проверить:
# если число меньше 10, то пропускаем это число;
# если число больше 100, то прекращаем считывать числа;
# в остальных случаях вывести это число обратно на консоль в отдельной строке.

# while True:
#     number = int(input())
#     if number < 10:
#         continue
#     if number > 100:
#         break
#     print(number)
#############################

# Напишите программу, которая считывает со стандартного ввода целые числа, по одному числу в строке, и после первого введенного нуля выводит сумму полученных на вход чисел.

# all_nums = 0
#
# while True:
#     userInput = int(input())
#     all_nums += userInput
#     if userInput == 0:
#         break
# print(all_nums)
###################################

# В Институте биоинформатики между информатиками и биологами устраивается соревнование. Победителям соревнования достанется большой и вкусный пирог. В команде биологов  a a человек, а в команде информатиков —  b b человек.  Нужно заранее разрезать пирог таким образом, чтобы можно было раздать кусочки пирога любой команде, выигравшей соревнование, при этом каждому участнику этой команды должно достаться одинаковое число кусочков пирога. И так как не хочется резать пирог на слишком мелкие кусочки, нужно найти минимальное подходящее число.  Напишите программу, которая помогает найти это число. Программа должна считывать размеры команд (два положительных целых числа  a a и  b b, каждое число вводится на отдельной строке) и выводить наименьшее число  d d, которое делится на оба этих числа без остатка.

# a = int (input())
# b = int (input())
# s = 1
# k = 2
# while s<k:
#   if s % a == 0 and s % b == 0:
#     k=s
#   else:
#     s=s+1
#     k=k+1
# print(s)
#######################################

# В то далёкое время, когда Паша ходил в школу, ему очень не нравилась формула Герона для вычисления площади треугольника, так как казалась слишком сложной. В один прекрасный момент Павел решил избавить всех школьников от страданий и написать и распространить по школам программу, вычисляющую площадь треугольника по трём сторонам.  Одна проблема: так как эта формула не нравилась Павлу, он её не запомнил. Помогите ему завершить доброе дело и напишите программу, вычисляющую площадь треугольника по переданным длинам трёх его сторон по формуле Герона:  S = p ( p − a ) ( p − b ) ( p − c ) S=  p(p−a)(p−b)(p−c) ​    где  p = a + b + c 2 p=  2 a+b+c ​    – полупериметр треугольника. На вход программе подаются целые числа, выводом программы должно являться вещественное число, соответствующее площади треугольника.

# a, b, c = int(input()), int(input()), int(input())
# p = (a + b + c) / 2
# s = (p * (p - a) * (p - b) * (p - c)) ** 0.5
# print(s)
###############################

# Напишите программу, принимающую на вход целое число, которая выводит True, если переданное значение попадает в интервал ( − 15 , 12 ] ∪ ( 14 , 17 ) ∪ [ 19 , + ∞ ) (−15,12]∪(14,17)∪[19,+∞) и False в противном случае (регистр символов имеет значение).  Обратите внимание на разные скобки, используемые для обозначения интервалов. В задании используются полуоткрытые и открытые интервалы. Подробнее про это вы можете прочитать, например, на википедии (полуинтервал, промежуток).

# a=int(input())
# if (-15 < a <= 12) or (14 < a < 17) or (19 <= a) :
#     print('True')
# else:
#     print('False')
################################

# Напишите простой калькулятор, который считывает с пользовательского ввода три строки: первое число, второе число и операцию, после чего применяет операцию к введённым числам ("первое число" "операция" "второе число") и выводит результат на экран.
#
# Поддерживаемые операции: +, -, /, *, mod, pow, div, где
# mod — это взятие остатка от деления,
# pow — возведение в степень,
# div — целочисленное деление.
#
# Если выполняется деление и второе число равно 0, необходимо выводить строку "Деление на 0!".
#
# Обратите внимание, что на вход программе приходят вещественные числа.

# x, y, s = float(input()), float(input()), input()
# try:
#     if s == '+': print(x + y)
#     elif s == '-': print(x - y)
#     elif s == '/': print(x / y)
#     elif s == "*": print(x * y)
#     elif s == 'mod': print(x % y)
#     elif s == 'pow': print(x**y)
#     elif s == 'div': print(x // y)
# except ZeroDivisionError:
#     print("Деление на 0!")
####################################

# Жители страны Малевии часто экспериментируют с планировкой комнат. Комнаты бывают треугольные, прямоугольные и круглые. Чтобы быстро вычислять жилплощадь, требуется написать программу, на вход которой подаётся тип фигуры комнаты и соответствующие параметры, которая бы выводила площадь получившейся комнаты.
# Для числа π в стране Малевии используют значение 3.14.

# figure = input()
# S = 0
# if figure == ('треугольник'):
#     a, b, c = int(input()), int(input()), int(input())
#     p = ((a + b + c) / 2)
#     S = ((p * (p - a) * (p - b) * (p - c)) ** 0.5)
# elif figure == ('круг'):
#     r = int(input())
#     S = 3.14 * (r ** 2)
# elif figure == ('прямоугольник'):
#     a, b = int(input()), int(input())
#     S = (a * b)
# print(S)
########################

# Напишите программу, которая получает на вход три целых числа, по одному числу в строке, и выводит на консоль в три строки сначала максимальное, потом минимальное, после чего оставшееся число.
#
# На ввод могут подаваться и повторяющиеся числа.

# a=int(input())
# b=int(input())
# c=int(input())
# Max=max(a,b,c)
# Min=min(a,b,c)
# Third=(a+b+c)-(Max+Min)
# print(Max,Min,Third,sep='\n' )
####################################

# В институте биоинформатики по офису передвигается робот. Недавно студенты из группы программистов написали для него программу, по которой робот, когда заходит в комнату, считает количество программистов в ней и произносит его вслух: "n программистов".
#
# Для того, чтобы это звучало правильно, для каждого
# n
# n нужно использовать верное окончание слова.
#
# Напишите программу, считывающую с пользовательского ввода целое число
# n
# n (неотрицательное), выводящее это число в консоль вместе с правильным образом изменённым словом "программист", для того, чтобы робот мог нормально общаться с людьми, например: 1 программист, 2 программиста, 5 программистов.
#
# В комнате может быть очень много программистов. Проверьте, что ваша программа правильно обработает все случаи, как минимум до 1000 человек.

# s = int (input())
# n1 =" программистов"
# n2 =" программист"
# n3 =" программиста"
# if  s>=0:
#   if s==0:
#     print(str(s) + n1)
#   elif s%100>=10 and s%100<=20:
#     print(str(s) + n1)
#   elif s%10==1:
#     print(str(s) + n2)
#   elif s%10>=2 and s%10<=4:
#     print(str(s) + n3)
#   else:
#     print(str(s) + n1)
####################################

# Паша очень любит кататься на общественном транспорте, а получая билет, сразу проверяет, счастливый ли ему попался. Билет считается счастливым, если сумма первых трех цифр совпадает с суммой последних трех цифр номера билета.
#
# Однако Паша очень плохо считает в уме, поэтому попросил вас написать программу, которая проверит равенство сумм и выведет "Счастливый", если суммы совпадают, и "Обычный", если суммы различны.
#
# На вход программе подаётся строка из шести цифр.
#
# Выводить нужно только слово "Счастливый" или "Обычный", с большой буквы.

# a = input()
# sum1 = int(a[0]) + int(a[1]) + int(a[2])
# sum2 = int(a[3]) + int(a[4]) + int(a[5])
# if sum1 == sum2:
#     print('Счастливый')
# else:
#     print('Обычный')
#################################

# Из передачи “Здоровье” Аня узнала, что рекомендуется спать хотя бы  A A часов в сутки, но пересыпать тоже вредно и не стоит спать более  B B часов. Сейчас Аня спит  H H часов в сутки. Если режим сна Ани удовлетворяет рекомендациям передачи “Здоровье”, выведите “Это нормально”. Если Аня спит менее  A A часов, выведите “Недосып”, если же более  B B часов, то выведите “Пересып”.  Получаемое число  A A всегда меньше либо равно  B B.  На вход программе в три строки подаются переменные в следующем порядке:  A A,  B B,  H H.  Обратите внимание на регистр символов: вывод должен в точности соответствовать описанному в задании, т. е. если программа должна вывести "Пересып", выводы программы "пересып", "ПЕРЕСЫП", "ПеРеСыП" и другие не будут считаться верными.  Это первое не самое тривиальное задание на условное выражение. В случаях, когда разбить исполнение программы на несколько направлений, стоит внимательно обдумать все условия, которые нужно использовать. Особое внимание стоит уделить строгости используемых условных операторов: различайте  < < и  ≤ ≤;  > > и  ≥ ≥. Для того, чтобы понимать, какой из них стоит использовать, внимательно прочитайте условие задания.

# a = int(input())
# b = int(input())
# c = int(input())
# if b >= c >= a:
#     print('Это нормально')
# elif c >= b:
#     print('Пересып')
# elif c <= a:
#     print('Недосып')
#################################

# Требуется определить, является ли данный год високосным.
#
# Напомним, что високосными годами считаются те годы, порядковый номер которых либо кратен 4, но при этом не кратен 100, либо кратен 400 (например, 2000-й год являлся високосным, а 2100-й будет невисокосным годом).
#
# Программа должна корректно работать на числах 1900≤n≤3000.
#
# Выведите "Високосный" в случае, если считанный год является високосным и "Обычный" в обратном случае (не забывайте проверять регистр выводимых программой символов).

# A = int (input())
# if ((A%4 == 0 and A%100 != 0) or (A%400 == 0)):
#   print('Високосный')
# else:
#   print('Обычный')
###############################

